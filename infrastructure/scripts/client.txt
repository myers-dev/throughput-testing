#!/bin/bash

# Dependencies
apt-get update -y
apt-get upgrade -y
apt-get install iproute2 -y
apt-get install wrk -y
apt-get install iperf3 -y
apt-get install ntp -y
apt-get install jq -y
apt-get install python3-pip -y
apt-get install unzip -y

# Python Dependencies
pip3 install --upgrade pip
pip3 install azure.servicebus
pip3 install setuptools_rust
pip3 install cryptography
pip3 install azure.cosmosdb.table
pip3 install iperf3

# Adjusting the timezone
timedatectl set-timezone America/New_York

# ethr installation 
wget https://github.com/microsoft/ethr/releases/download/v1.0.0/ethr_linux.zip
unzip ethr_linux.zip
chmod +x ethr
cp ethr /usr/bin

# wrk testing suite
cd ~
git clone https://github.com/wg/wrk
cd wrk
make
chmod +x wrk
cp wrk /usr/bin/

# ntttcp
cd ~
git clone https://github.com/Microsoft/ntttcp-for-linux
cd ntttcp-for-linux/src
make
make install

cd ~

# vegeta
cd ~
wget https://github.com/tsenart/vegeta/releases/download/v12.8.4/vegeta_12.8.4_linux_amd64.tar.gz
tar xvzf vegeta_12.8.4_linux_amd64.tar.gz
cp vegeta /usr/bin

# iperf3 test suite
cat << EOF>client.py
from azure.servicebus import ServiceBusClient, ServiceBusMessage
from azure.cosmosdb.table.tableservice import TableService
from azure.cosmosdb.table.models import Entity

import datetime
import time
import socket
import os

def get_sourceip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't even have to be reachable
        s.connect(('1.1.1.1', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

def get_serverip():
    # create a Service Bus client using the connection string
    servicebus_client = ServiceBusClient.from_connection_string(conn_str='${CONNECTION_STR}', logging_enable=True)

    with servicebus_client:
        msg = None
        while not msg:
            receiver = servicebus_client.get_queue_receiver(queue_name='${QUEUE_NAME}', max_wait_time=5)

            with receiver:
                for msg in receiver:
                    receiver.complete_message(msg)
                    return (str(msg))
                

    throughput = [ result.sent_Mbps, result.received_Mbps ]
    return(throughput)

def measure_throughput(ip,duration,streams=64):
    o=os.popen(f"iperf3 -c {ip} -t {duration} -P{streams} -J | jq \".end.sum_sent.bits_per_second, .end.sum_received.bits_per_second, .end.streams[0].sender.max_rtt, .end.streams[0].sender.min_rtt, .end.streams[0].sender.mean_rtt\" ").read()

    return (o.split("\n"))


source_ip = get_sourceip()
server_ip = get_serverip()
duration  = 55
streams   = 1

# ------------------------------


table_service = TableService(account_name='${STORAGEACCOUNT}', account_key='${STORAGEACCOUNTKEY}')

while True:
    if int(datetime.datetime.now().strftime("%S")) == 0:  # and int(datetime.datetime.now().strftime("%M"))%30 == 0 
        n = datetime.datetime.now().strftime("%m %d %Y %H %M %S")

        # --------------------------------

        entity = Entity()
        entity.PartitionKey = source_ip
        entity.RowKey = n
        throughput = measure_throughput(server_ip,duration,streams)
        entity.sent_throughput = throughput[0]
        entity.received_throughput = throughput[1]
        entity.max_rtt = throughput[2]
        entity.min_rtt = throughput[3]
        entity.mean_rtt = throughput[4]
        entity.server = server_ip
        entity.duration = duration
        print("ready to insert",entity)
        table_service.insert_entity('stats', entity)
        print("inserted",entity)


EOF

# Uncomment for traffic generator
#python3 client.py