#!/bin/bash

# Dependencies
apt-get update -y
apt-get upgrade -y
#apt-get install iproute2 -y
#apt-get install wrk -y
apt-get install iperf3 -y
apt-get install ntp -y
apt-get install jq -y
apt-get install python3-pip -y
apt-get install unzip -y

# Python Dependencies
pip3 install --upgrade pip
pip3 install azure.servicebus
pip3 install setuptools_rust
pip3 install cryptography
pip3 install azure.cosmosdb.table

# Increasing number of descriptors
ulimit -n 10000

# Adjusting the timezone
timedatectl set-timezone America/New_York

# ethr installation (uncomment if tool is needed)
# cd ~
# wget https://github.com/microsoft/ethr/releases/download/v1.0.0/ethr_linux.zip
# unzip ethr_linux.zip
# chmod +x ethr
# cp ethr /usr/bin

# wrk testing suite (uncomment if tool is needed)
# cd ~
# git clone https://github.com/wg/wrk
# cd wrk
# make
# chmod +x wrk
# cp wrk /usr/bin/

# ntttcp  (uncomment if tool is needed)
# cd ~
# git clone https://github.com/Microsoft/ntttcp-for-linux
# cd ntttcp-for-linux/src
# make
# make install

cd ~

# vegeta
cd ~
wget https://github.com/tsenart/vegeta/releases/download/v12.8.4/vegeta_12.8.4_linux_amd64.tar.gz
tar xvzf vegeta_12.8.4_linux_amd64.tar.gz
cp vegeta /usr/bin

# iperf3 test suite
cat << EOF>client.py
from azure.servicebus import ServiceBusClient, ServiceBusMessage
from azure.cosmosdb.table.tableservice import TableService
from azure.cosmosdb.table.models import Entity

import datetime
import time
import socket
import os
import random

def get_sourceip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't even have to be reachable
        s.connect(('1.1.1.1', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

def get_serverip():
    # create a Service Bus client using the connection string
    servicebus_client = ServiceBusClient.from_connection_string(conn_str='${CONNECTION_STR}', logging_enable=True)

    with servicebus_client:
        msg = None
        while not msg:
            receiver = servicebus_client.get_queue_receiver(queue_name='${QUEUE_NAME}', max_wait_time=5)
            
            with receiver:
                for msg in receiver:
                    receiver.complete_message(msg)
                    return (str(msg))

def measure_throughput(ip,server_port,duration,streams=64):
    cport=int(random.random()*(65535-49152) + 49152)
    o=os.popen(f"iperf3 -c {ip} -t {duration} --cport {cport} --port {server_port} -P{streams} -J | jq \".end.sum_sent.bits_per_second, .end.sum_received.bits_per_second, .end.streams[0].sender.max_rtt, .end.streams[0].sender.min_rtt, .end.streams[0].sender.mean_rtt\" ").read()

    return (o.split("\n"))


def measure_http(ip,duration,rate=50,protocol="http"):
    filter = '.latencies.total, .latencies.mean, .latencies.max, .latencies.min, .throughput, .success'

    o=os.popen(f"echo \"GET {protocol}://{ip}\" | vegeta attack -duration={duration}s -insecure -rate={rate} | vegeta report -type=json | jq \"{filter}\" ").read()

    return (o.split("\n"))

scalefactor_vegeta = 1000000
scalefactor_iperf3 = 1

source_ip = get_sourceip()

server_ip,server_port = get_serverip().split()
#server_ip = "10.1.255.254" # if load balancer is in use

duration  = ${TESTDURATION} # in minutes 

streams   = ${TESTIPERF3FLOWS}   # iperf3 specific

rate      = 50 #                 # vegeta specific
protocol = "${TESTPROTOCOL}"     # vegeta specific

test_type = "${TESTTYPE}"        # iperf3 , vegeta


# ------------------------------


table_service = TableService(account_name='${STORAGEACCOUNT}', account_key='${STORAGEACCOUNTKEY}')

while True:
    if int(datetime.datetime.now().strftime("%S")) == 0 and int(datetime.datetime.now().strftime("%M"))%duration == 0:
        n = datetime.datetime.now().strftime("%m %d %Y %H %M %S")

        # --------------------------------

        entity = Entity()
        entity.PartitionKey = source_ip
        entity.RowKey = n

        if test_type == "iperf3":
            throughput = measure_throughput(server_ip,server_port,(duration-1)*60,streams)
            entity.test_type = "iperf3"
            entity.sent_throughput = throughput[0]
            entity.received_throughput = throughput[1]
            entity.max_rtt = int(throughput[2])/scalefactor_iperf3
            entity.min_rtt = int(throughput[3])/scalefactor_iperf3
            entity.mean_rtt = int(throughput[4])/scalefactor_iperf3
            entity.server = server_ip + ":" + server_port
            entity.duration = duration
        elif test_type == "vegeta":
            throughput = measure_http(server_ip,(duration-1)*60,rate=rate,protocol=protocol)
            entity.test_type = "vegeta"
            entity.protocol = protocol
            entity.latency_total = int(throughput[0])/scalefactor_vegeta
            entity.latency_mean = int(throughput[1])/scalefactor_vegeta
            entity.latency_max = int(throughput[2])/scalefactor_vegeta
            entity.latency_min = int(throughput[3])/scalefactor_vegeta
            entity.throughput = throughput[4]
            entity.success = throughput[5]

        entity.server = server_ip
        #print("ready to insert",entity)
        table_service.insert_entity('stats', entity)
        #print("inserted",entity)

EOF

# Uncomment for traffic generator
python3 client.py